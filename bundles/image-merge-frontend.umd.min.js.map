{"version":3,"sources":["../../../projects/image-merge-frontend/src/lib/services/config.service.ts","../../../projects/image-merge-frontend/src/lib/image-merge-frontend.component.ts","../../../projects/image-merge-frontend/src/lib/component/image-layer/image-layer.component.ts","../../../projects/image-merge-frontend/src/lib/icons/icons.module.ts","../../../projects/image-merge-frontend/src/lib/directive/hide-image-on-lode.directive.ts","../../../projects/image-merge-frontend/src/lib/image-merge-frontend.module.ts"],"names":["IMAGE_MERGE_FRONTEND_CONFIG_TOKEN","InjectionToken","ConfigService","config","this","setConfig","prototype","heightWidthRatio","getPlainSize","y","x","plainSize","getHeightWidthRatio","Injectable","Inject","args","ImageMergeFrontendComponent","wrapperElement","resizeThrottled$","Subject","moveTo","ratioChange","EventEmitter","currentMaxHeightChange","subscriptions","ngOnInit","push","pipe","throttleTime","distinctUntilChanged","subscribe","getCalSizeCallback","bind","ngAfterViewInit","_this","setTimeout","calcSize","width","plainRatio","maxHeight","height","nativeElement","offsetWidth","fillerHeight","fillerWidth","ratio","emit","ngOnDestroy","forEach","subscription","unsubscribe","getMergeStyle","Component","selector","template","ElementRef","Input","type","HostBinding","Output","ViewChild","ImageLayerComponent","parentLayerOffset","doNotSort","ngOnChanges","changes","layerImage","currentValue","previousValue","a","variants","currentVariant","isNumeric","val","library","addIconPacks","fas","far","NgModule","declarations","imports","FontAwesomeModule","exports","FaIconLibrary","HideImageOnLodeDirective","elRef","renderer","addEventListener","showElement","removeEventListener","src","setAttribute","style","display","Directive","Renderer2","ImageMergeFrontendModule","forRoot","ngModule","providers","provide","useValue","CommonModule","IconsModule","Éµ0"],"mappings":"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","sourcesContent":["import {Inject, Injectable, InjectionToken} from '@angular/core';\nimport {LayerCoordinates} from '../models/layer-object.interface';\n\nexport const IMAGE_MERGE_FRONTEND_CONFIG_TOKEN: InjectionToken<ConfigService> = new InjectionToken<ConfigService>('IMAGE_MERGE_FRONTEND_CONFIG_TOKEN');\n\nexport interface ImageMergeFrontendConfigInterface {\n    plainSize?: LayerCoordinates;\n    showMenu?: boolean;\n    showIcons?: boolean;\n\n}\n\n@Injectable()\nexport class ConfigService {\n    private heightWidthRatio: number;\n\n    constructor(@Inject(IMAGE_MERGE_FRONTEND_CONFIG_TOKEN) private config: ImageMergeFrontendConfigInterface = {}) {\n        this.setConfig(config);\n    }\n\n    public setConfig(config: ImageMergeFrontendConfigInterface): void {\n        this.config = config;\n        this.heightWidthRatio = this.getPlainSize().y / this.getPlainSize().x;\n    }\n\n    public getPlainSize(): LayerCoordinates {\n        return this.config.plainSize || {x: 600, y: 800};\n    }\n\n    public getHeightWidthRatio(): number {\n        return this.heightWidthRatio || this.getPlainSize().y / this.getPlainSize().x;\n    }\n}\n","import {\n    AfterViewInit,\n    Component,\n    ElementRef,\n    EventEmitter, HostBinding,\n    Input,\n    OnDestroy,\n    OnInit,\n    Output,\n    ViewChild\n} from '@angular/core';\nimport {LayerImage} from './models/layer-object.interface';\nimport {Subject, Subscription} from 'rxjs';\nimport {distinctUntilChanged, throttleTime} from 'rxjs/operators';\nimport {ConfigService} from './services/config.service';\n\n@Component({\n    selector: 'lib-image-merge-frontend',\n    templateUrl: './image-merge-frontend.component.html',\n    styleUrls: ['./image-merge-frontend.component.less']\n})\nexport class ImageMergeFrontendComponent implements OnInit, AfterViewInit, OnDestroy {\n\n    /** Ratio to multiply image axis with */\n    public ratio: number;\n\n    // Inputs Outputs\n    /** Input resize event from parent */\n    @Input()\n    private resizeThrottled$: Subject<any> = new Subject<any>();\n\n    /** Root Layer image to be randered */\n    @Input()\n    public layerImage: LayerImage;\n\n    /** Maximum height the plain takes */\n    @Input()\n    public maxHeight: number;\n\n    /** Moves images to left/center/right with flex properties */\n    @Input()\n    @HostBinding('style.justify-content')\n    private moveTo: 'flex-start' | 'flex-end' | 'center' = 'center';\n\n    /** Emits a change event if this.ratio changes */\n    @Output()\n    private ratioChange: EventEmitter<number> = new EventEmitter<number>();\n\n    /** Emits height the current image takes at max */\n    @Output()\n    private currentMaxHeightChange: EventEmitter<number> = new EventEmitter<number>();\n\n    // Subscriptions\n    /** Local subscripts to be canceled of destroy */\n    private subscriptions: Subscription[] = [];\n\n    // Element Refs\n    /** Filler element */\n    @ViewChild('imageMergeFrontendFiller')\n    public fillerElement: ElementRef;\n\n    /** Height of filler element */\n    public fillerHeight: number;\n    /** Width of filler element */\n    public fillerWidth: number;\n\n    constructor(private config: ConfigService, private wrapperElement: ElementRef) {\n    }\n\n    public ngOnInit(): void {\n        // On Resize trigger this.calcSize\n        this.subscriptions.push(\n            this.resizeThrottled$\n                .pipe(\n                    throttleTime(80),\n                    distinctUntilChanged()\n                )\n                .subscribe(this.getCalSizeCallback().bind(this))\n        );\n    }\n\n    public ngAfterViewInit(): void {\n        this.getCalSizeCallback()();\n    }\n\n    private getCalSizeCallback(): () => void {\n        return () => setTimeout(this.calcSize.bind(this));\n    }\n\n    /** Calculates  */\n    public calcSize(width: number = 0): void {\n        // get ration if images (height / width)\n        const plainRatio = this.config.getHeightWidthRatio();\n        // define max height of images\n        const maxHeight = this.maxHeight || this.config.getPlainSize().y;\n\n        // get with of wrapper\n        width = width || this.wrapperElement.nativeElement.offsetWidth;\n        // calculate height by plain size\n        let height = width * plainRatio;\n\n        // if height exceeds max height shrink width if filler element\n        if (height > maxHeight) {\n            height = maxHeight;\n            width = height * (1 / plainRatio);\n        }\n\n        // set filler element size\n        this.fillerHeight = height;\n        this.fillerWidth = width;\n        // calculate new ratio for resizing images, so the fit plain\n        this.ratio = width / this.config.getPlainSize().x;\n\n        // emit change of ration\n        this.ratioChange.emit(this.ratio);\n        // emit change of filler height (so parent my adapt)\n        this.currentMaxHeightChange.emit(this.fillerHeight);\n    }\n\n    public ngOnDestroy(): void {\n        // unsubscribe all subscriptions\n        this.subscriptions.forEach((subscription: Subscription) => { subscription.unsubscribe(); });\n    }\n\n    public getMergeStyle(): object {\n        return {\n            height: this.fillerHeight + 'px',\n            width: this.fillerWidth  + 'px'\n        };\n    }\n}\n","import {Component, EventEmitter, Input, OnChanges, OnInit, Output, SimpleChanges} from '@angular/core';\nimport {ConfigService} from '../../services/config.service';\nimport {LayerCoordinates, LayerImage} from '../../models/layer-object.interface';\n\n\n@Component({\n    selector: 'lib-image-layer',\n    templateUrl: './image-layer.component.html',\n    styleUrls: ['./image-layer.component.less']\n})\n/** Display ImageLayer and render other ImageLayerComponents */\nexport class ImageLayerComponent implements OnChanges {\n    /** current Layer image */\n    @Input()\n    public layerImage: LayerImage;\n    /** Offset by which the parent moves its children */\n    @Input()\n    public parentLayerOffset: LayerCoordinates = {x: 0, y: 0};\n    /** Ratio by which the image is resized to fit available space */\n    @Input()\n    public ratio: number;\n\n    constructor(public config: ConfigService) {\n    }\n\n    /** prevent so valueKey pipe to sort any keys */\n    public doNotSort(): number {\n        return 0;\n    }\n\n    /** listen to changes of layer image => it may has an unset currentVariant */\n    ngOnChanges(changes: SimpleChanges): void {\n        if (changes.layerImage && changes.layerImage.currentValue !== changes.layerImage.previousValue) {\n            const a: LayerImage = changes.layerImage.currentValue;\n            if (a.variants && typeof a.currentVariant === 'undefined') {\n                a.currentVariant = 0;\n            }\n        }\n    }\n\n    /** check if val is a number */\n    public isNumeric(val: number): boolean {\n        return typeof val === 'number';\n    }\n}\n","import {NgModule} from '@angular/core';\nimport {far} from '@fortawesome/free-regular-svg-icons';\nimport {FaIconLibrary, FontAwesomeModule} from '@fortawesome/angular-fontawesome';\nimport {fas} from '@fortawesome/free-solid-svg-icons';\n\n\n@NgModule({\n  declarations: [],\n  imports: [ FontAwesomeModule ],\n  exports: [ FontAwesomeModule ]\n})\nexport class IconsModule {\n  constructor(library: FaIconLibrary) {\n    // todo: Refactor to used icons\n    library.addIconPacks(fas, far);\n  }\n}\n","import {Directive, ElementRef, Input, OnChanges, OnDestroy, OnInit, Renderer2, SimpleChanges} from '@angular/core';\n\n@Directive({\n  selector: '[libHideImageOnLoad]'\n})\nexport class HideImageOnLodeDirective implements OnInit, OnDestroy, OnChanges{\n\n  @Input()\n  public src: string;\n\n  constructor(private elRef: ElementRef, private renderer: Renderer2) {}\n\n  public ngOnInit(): void {\n    this.elRef.nativeElement.addEventListener('load', this.showElement.bind(this));\n  }\n\n  public ngOnDestroy(): void {\n    this.elRef.nativeElement.removeEventListener('load', this.showElement);\n  }\n\n  public ngOnChanges(changes: SimpleChanges): void {\n    if (changes.src && changes.src.currentValue !== changes.src.previousValue) {\n      this.renderer.setAttribute(this.elRef.nativeElement, 'src', changes.src.currentValue);\n      this.elRef.nativeElement.style.display = 'none';\n    }\n  }\n\n  private showElement(): void {\n    this.elRef.nativeElement.style.display = 'block';\n  }\n\n}\n","import {ModuleWithProviders, NgModule} from '@angular/core';\nimport {ImageMergeFrontendComponent} from './image-merge-frontend.component';\nimport {CommonModule} from '@angular/common';\nimport {ImageLayerComponent} from './component/image-layer/image-layer.component';\nimport {\n    ConfigService,\n    IMAGE_MERGE_FRONTEND_CONFIG_TOKEN,\n    ImageMergeFrontendConfigInterface\n} from './services/config.service';\nimport {IconsModule} from './icons/icons.module';\nimport { HideImageOnLodeDirective } from './directive/hide-image-on-lode.directive';\n\n\n@NgModule({\n    declarations: [ImageMergeFrontendComponent, ImageLayerComponent, HideImageOnLodeDirective],\n    imports: [\n        CommonModule,\n        IconsModule\n    ],\n    providers: [\n        ConfigService,\n        {provide: IMAGE_MERGE_FRONTEND_CONFIG_TOKEN, useValue: {}}\n    ],\n    exports: [ImageMergeFrontendComponent]\n})\nexport class ImageMergeFrontendModule {\n\n    static forRoot(config: ImageMergeFrontendConfigInterface): ModuleWithProviders<ImageMergeFrontendModule> {\n        return {\n            ngModule: ImageMergeFrontendModule,\n            providers: [\n                {provide: IMAGE_MERGE_FRONTEND_CONFIG_TOKEN, useValue: config}\n            ]\n        };\n    }\n}\n"]}